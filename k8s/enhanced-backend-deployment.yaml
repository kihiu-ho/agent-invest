apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-backend
  namespace: functorhk
  labels:
    app: webapp-backend
    component: api
    version: analytics-fix
    tier: backend
  annotations:
    deployment.kubernetes.io/revision: "1"
    agentinvest.io/analytics-endpoints: "enabled"
    agentinvest.io/websocket-support: "enabled"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: webapp-backend
  template:
    metadata:
      labels:
        app: webapp-backend
        component: api
        version: analytics-fix
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      imagePullSecrets:
      - name: dockerhub-credentials
      # Init container to create crawl4ai directory
      initContainers:
      - name: init-crawl4ai
        image: busybox:1.35
        command: ['sh', '-c', 'mkdir -p /.crawl4ai && chmod 777 /.crawl4ai']
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: crawl4ai-cache
          mountPath: /.crawl4ai
      containers:
      - name: backend
        image: functorhk/webapp-backend:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: webapp-config
        - secretRef:
            name: webapp-secrets
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: webapp-secrets
              key: POSTGRES_PASSWORD
        # Fix Crawl4AI permission issues
        - name: CRAWL4AI_BASE_DIRECTORY
          value: "/tmp/.crawl4ai"
        - name: CRAWL4AI_CACHE_DIRECTORY
          value: "/tmp/.crawl4ai/cache"
        - name: CRAWL4AI_LOG_DIRECTORY
          value: "/tmp/.crawl4ai/logs"
        - name: DEPLOYMENT_VERSION
          value: "analytics-fix"
        - name: ANALYTICS_ENABLED
          value: "true"
        - name: WEBSOCKET_ENABLED
          value: "true"
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: reports-storage
          mountPath: /app/reports
        - name: logs-storage
          mountPath: /app/logs
        - name: crawl4ai-cache
          mountPath: /.crawl4ai
      volumes:
      - name: reports-storage
        persistentVolumeClaim:
          claimName: reports-pvc
      - name: logs-storage
        emptyDir: {}
      - name: crawl4ai-cache
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: webapp-backend-service
  namespace: functorhk
  labels:
    app: webapp-backend
    component: api
    tier: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: NodePort
  ports:
  - port: 8000
    targetPort: 8000
    nodePort: 30083
    protocol: TCP
    name: http
  selector:
    app: webapp-backend
    tier: backend
  sessionAffinity: None
