apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-frontend
  namespace: functorhk
  labels:
    app: webapp-frontend
    component: ui
    version: chartjs-fix
    tier: frontend
  annotations:
    deployment.kubernetes.io/revision: "1"
    agentinvest.io/chartjs-adapter: "enabled"
    agentinvest.io/analytics-dashboard: "enabled"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: webapp-frontend
  template:
    metadata:
      labels:
        app: webapp-frontend
        component: ui
        version: chartjs-fix
        tier: frontend
      annotations:
        prometheus.io/scrape: "false"
    spec:
      imagePullSecrets:
      - name: dockerhub-credentials
      containers:
      - name: frontend
        image: functorhk/webapp-frontend:v1.0.3
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: REACT_APP_API_URL
          valueFrom:
            configMapKeyRef:
              name: webapp-config
              key: REACT_APP_API_URL
        - name: REACT_APP_WS_URL
          valueFrom:
            configMapKeyRef:
              name: webapp-config
              key: REACT_APP_WS_URL
        - name: REACT_APP_BACKEND_HOST
          value: ""
        - name: DEPLOYMENT_VERSION
          value: "chartjs-fix"
        - name: CHARTJS_ADAPTER_ENABLED
          value: "true"
        - name: ANALYTICS_DASHBOARD_ENABLED
          value: "true"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 6
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
      volumes:
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: webapp-frontend-service
  namespace: functorhk
  labels:
    app: webapp-frontend
    component: ui
    tier: frontend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30085
    protocol: TCP
    name: http
  selector:
    app: webapp-frontend
  sessionAffinity: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-proxy-config
  namespace: functorhk
  labels:
    app: nginx-proxy
    component: proxy
data:
  nginx.conf: |
    upstream backend {
        server webapp-backend-service:8000;
    }
    
    upstream frontend {
        server webapp-frontend-service:80;
    }
    
    server {
        listen 80;
        server_name _;
        
        # Frontend routes
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # API routes
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }
        
        # WebSocket routes
        location /ws/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
