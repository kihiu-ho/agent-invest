# Multi-stage build optimized for cache export and minimal disk usage
FROM node:18-alpine AS builder

# Set environment variables for cache optimization
ENV NODE_ENV=production \
    NPM_CONFIG_CACHE=/tmp/.npm \
    YARN_CACHE_FOLDER=/tmp/.yarn

# Install build dependencies in single layer
RUN apk add --no-cache --virtual .build-deps \
    python3 \
    make \
    g++ \
    && mkdir -p /tmp/.npm /tmp/.yarn

# Set working directory
WORKDIR /app

# Copy package files for better caching
COPY package.json ./

# Copy all package-related files (using wildcard to handle optional files)
COPY package*.json ./

# Install ALL dependencies (including devDependencies needed for build)
RUN echo "📦 Installing dependencies (including devDependencies for build)..." && \
    echo "📋 Debugging build context - Files in current directory:" && \
    ls -la && \
    echo "📋 Checking specifically for package files:" && \
    ls -la package* 2>/dev/null || echo "No package files found" && \
    echo "📋 Checking for lockfiles with explicit names:" && \
    (ls -la package-lock.json 2>/dev/null && echo "✅ package-lock.json found") || echo "❌ package-lock.json not found" && \
    (ls -la yarn.lock 2>/dev/null && echo "✅ yarn.lock found") || echo "❌ yarn.lock not found" && \
    if [ -f yarn.lock ]; then \
        echo "🧶 Using Yarn for dependency installation" && \
        yarn install --frozen-lockfile --cache-folder /tmp/.yarn; \
    elif [ -f package-lock.json ]; then \
        echo "📦 Using npm ci for dependency installation" && \
        npm ci --cache /tmp/.npm; \
    else \
        echo "📦 Using npm install for dependency installation (no lockfile found)" && \
        npm install --cache /tmp/.npm; \
    fi \
    && echo "📋 Verifying @tailwindcss/forms installation:" && \
    npm list @tailwindcss/forms || echo "⚠️ @tailwindcss/forms not found in node_modules" && \
    rm -rf /tmp/.npm /tmp/.yarn \
    && apk del .build-deps

# Copy source code
COPY . .

# Build application with optimizations
RUN echo "🏗️ Building application..." && \
    if [ -f yarn.lock ]; then \
        echo "🧶 Using Yarn for build" && \
        yarn build; \
    else \
        echo "📦 Using npm for build" && \
        npm run build; \
    fi \
    && echo "🧹 Cleaning up build artifacts and devDependencies..." \
    && rm -rf node_modules \
    && rm -rf src \
    && rm -rf public \
    && rm -f package*.json yarn.lock* \
    && rm -f tailwind.config.js postcss.config.js \
    && find . -name "*.map" -delete \
    && find . -name "*.test.*" -delete \
    && find . -name "__tests__" -type d -exec rm -rf {} + \
    && find . -name ".cache" -type d -exec rm -rf {} + \
    && find . -name ".eslintrc*" -delete \
    && find . -name "tsconfig*.json" -delete

# Production stage - ultra-minimal
FROM nginx:alpine AS production

# Install minimal runtime dependencies
RUN apk add --no-cache \
    curl \
    && addgroup -g 1000 agentinvest \
    && adduser -D -s /bin/sh -u 1000 -G agentinvest agentinvest

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx config if it exists (will be created later if not)
RUN if [ -f /app/nginx.conf ]; then cp /app/nginx.conf /etc/nginx/nginx.conf; fi

# Create nginx configuration if not exists
RUN if [ ! -f /etc/nginx/nginx.conf ]; then \
        echo 'worker_processes auto;' > /etc/nginx/nginx.conf && \
        echo 'error_log /var/log/nginx/error.log warn;' >> /etc/nginx/nginx.conf && \
        echo 'pid /var/run/nginx.pid;' >> /etc/nginx/nginx.conf && \
        echo '' >> /etc/nginx/nginx.conf && \
        echo 'events {' >> /etc/nginx/nginx.conf && \
        echo '    worker_connections 1024;' >> /etc/nginx/nginx.conf && \
        echo '}' >> /etc/nginx/nginx.conf && \
        echo '' >> /etc/nginx/nginx.conf && \
        echo 'http {' >> /etc/nginx/nginx.conf && \
        echo '    include /etc/nginx/mime.types;' >> /etc/nginx/nginx.conf && \
        echo '    default_type application/octet-stream;' >> /etc/nginx/nginx.conf && \
        echo '' >> /etc/nginx/nginx.conf && \
        echo '    log_format main '\''$remote_addr - $remote_user [$time_local] "$request" '\''' >> /etc/nginx/nginx.conf && \
        echo '                    '\''$status $body_bytes_sent "$http_referer" '\''' >> /etc/nginx/nginx.conf && \
        echo '                    '\''"$http_user_agent" "$http_x_forwarded_for"'\'';' >> /etc/nginx/nginx.conf && \
        echo '' >> /etc/nginx/nginx.conf && \
        echo '    access_log /var/log/nginx/access.log main;' >> /etc/nginx/nginx.conf && \
        echo '' >> /etc/nginx/nginx.conf && \
        echo '    sendfile on;' >> /etc/nginx/nginx.conf && \
        echo '    tcp_nopush on;' >> /etc/nginx/nginx.conf && \
        echo '    tcp_nodelay on;' >> /etc/nginx/nginx.conf && \
        echo '    keepalive_timeout 65;' >> /etc/nginx/nginx.conf && \
        echo '    types_hash_max_size 2048;' >> /etc/nginx/nginx.conf && \
        echo '' >> /etc/nginx/nginx.conf && \
        echo '    gzip on;' >> /etc/nginx/nginx.conf && \
        echo '    gzip_vary on;' >> /etc/nginx/nginx.conf && \
        echo '    gzip_min_length 1024;' >> /etc/nginx/nginx.conf && \
        echo '    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;' >> /etc/nginx/nginx.conf && \
        echo '' >> /etc/nginx/nginx.conf && \
        echo '    server {' >> /etc/nginx/nginx.conf && \
        echo '        listen 80;' >> /etc/nginx/nginx.conf && \
        echo '        server_name localhost;' >> /etc/nginx/nginx.conf && \
        echo '        root /usr/share/nginx/html;' >> /etc/nginx/nginx.conf && \
        echo '        index index.html index.htm;' >> /etc/nginx/nginx.conf && \
        echo '' >> /etc/nginx/nginx.conf && \
        echo '        location / {' >> /etc/nginx/nginx.conf && \
        echo '            try_files $uri $uri/ /index.html;' >> /etc/nginx/nginx.conf && \
        echo '        }' >> /etc/nginx/nginx.conf && \
        echo '' >> /etc/nginx/nginx.conf && \
        echo '        location /health {' >> /etc/nginx/nginx.conf && \
        echo '            access_log off;' >> /etc/nginx/nginx.conf && \
        echo '            return 200 "healthy\n";' >> /etc/nginx/nginx.conf && \
        echo '            add_header Content-Type text/plain;' >> /etc/nginx/nginx.conf && \
        echo '        }' >> /etc/nginx/nginx.conf && \
        echo '    }' >> /etc/nginx/nginx.conf && \
        echo '}' >> /etc/nginx/nginx.conf; \
    fi

# Set proper permissions
RUN chown -R agentinvest:agentinvest /usr/share/nginx/html \
    && chown -R agentinvest:agentinvest /var/cache/nginx \
    && chown -R agentinvest:agentinvest /var/log/nginx \
    && chown -R agentinvest:agentinvest /etc/nginx/conf.d \
    && touch /var/run/nginx.pid \
    && chown agentinvest:agentinvest /var/run/nginx.pid

# Switch to non-root user
USER agentinvest

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
